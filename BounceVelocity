local module = {}
module.__index = module

local RS = game:GetService("RunService")

local activeVelocities = {}

function rotateVectorAround(v, amount, axis)
	return CFrame.fromAxisAngle(axis, amount):VectorToWorldSpace(v)
end

function module.new(parent)
	local self = setmetatable({}, module)

	self._Connections = {}

	self.Parent = parent
	self.Velocity = Vector3.new()
	self.Position = self.Parent.Position
	self.CollisionSize = self.Parent.Size 
	self.IgnoreList = {}

	self.RotateCollision = true
	self.UseCollisionSize = true
	self.AffectedByGravity = false
	self.LoseMomentumOvertime = false
	self.Gravity = workspace.Gravity

	activeVelocities[self] = self

	coroutine.resume(coroutine.create(function()
		while activeVelocities[self] do
			if self.Parent.Parent then
				self:Update()
			else
				self:Destroy()
			end
		end
	end))

	return self
end

function module:Destroy()
	activeVelocities[self] = nil
end

function module:CanCollide(with)
	if not with.CanCollide then
		return false
	end

	return true
end

function module:GetNextRayFaceDirection()
	local direction = Vector3.new()

	if self.Velocity.X > 0 then
		direction += Vector3.new(1, 0, 0)
	elseif self.Velocity.X < 0 then
		direction -= Vector3.new(1, 0, 0)
	end

	if self.Velocity.Y > 0 then
		direction += Vector3.new(0, 1, 0)
	elseif self.Velocity.Y < 0 then
		direction -= Vector3.new(0, 1, 0)
	end

	if self.Velocity.Z > 0 then
		direction += Vector3.new(0, 0, 1)
	elseif self.Velocity.Z < 0 then
		direction -= Vector3.new(0, 0, 1)
	end

	return direction
end

function module:Update()
	local HB = RS.Heartbeat:Wait()

	local nextRayFaceDirection = self:GetNextRayFaceDirection()

	local collisionSize = self.CollisionSize 

	local rotate = self.Parent.Orientation.Z

	if rotate < 0 then rotate = -rotate end
	if rotate > 90 then rotate = 0 end

	local nextPosition = self.Position + self.Velocity * HB 

	if rotate > 0 then
		collisionSize = rotateVectorAround(collisionSize, math.rad(rotate), nextRayFaceDirection)
		if nextRayFaceDirection.Y == 1 or nextRayFaceDirection.Y == -1 then
			collisionSize = rotateVectorAround(collisionSize, math.rad(rotate), nextRayFaceDirection) * 4
		end
	end

	local ray = Ray.new(self.Position, (nextPosition - self.Position) * collisionSize)
	local hit, hitpos, surfacenormal = workspace:FindPartOnRayWithIgnoreList(ray, {self.Parent, workspace.Effects, unpack(self.IgnoreList)})

	local distance = (ray.Origin - hitpos).Magnitude
	local p = Instance.new("Part")
	p.Anchored = true
	p.CanCollide = false
	p.Size = Vector3.new(0.1, 0.1, distance)
	p.CFrame = CFrame.lookAt(ray.Origin, hitpos)*CFrame.new(0, 0, -distance/2)
	p.Parent = workspace.Effects
	game:GetService("Debris"):AddItem(p, 0.01)

	if hit and self:CanCollide(hit) then 
		local reflect = (self.Velocity - (2 * self.Velocity:Dot(surfacenormal) * surfacenormal))

		if not self.AffectedByGravity then
			self.Velocity = reflect 
		else
			self.Velocity = reflect - Vector3.new(0, self.Gravity, 0)
		end

		if self.LoseMomentumOvertime then
			self.Velocity -= Vector3.new(0, self.Gravity, 0)
		end
	else
		self.Position = nextPosition

		if self.LoseMomentumOvertime then
			self.Velocity -= Vector3.new(0, self.Gravity * HB, 0)
		end
	end

	self.Parent.Position = self.Position
end

return module
