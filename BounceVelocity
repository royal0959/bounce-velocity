local module = {}
module.__index = module

local RS = game:GetService("RunService")

local activeVelocities = {}

function module.new(parent)
	local self = setmetatable({}, module)

	self.Parent = parent
	self.Velocity = Vector3.new()
	self.Position = self.Parent.Position
	self.CollisionSize = self.Parent.Size 
	self.IgnoreList = {}

	self.AffectedByGravity = false
	self.LoseMomentumOvertime = false
	self.LoseMomentumEachBounce = false
	self.MomentumDecelerationOvertime = Vector3.new(5, 5, 5)
	self.MomentumDecelerationBounce = Vector3.new(50, 50, 50)
	self.Gravity = 1

	activeVelocities[self] = self

	coroutine.resume(coroutine.create(function()
		while activeVelocities[self] do
			if self.Parent.Parent then
				self:Update()
			else
				self:Destroy()
			end
		end
	end))

	return self
end

function module:Destroy()
	activeVelocities[self] = nil
end

function module:CanCollide(with)
	if not with.CanCollide then
		return false
	end

	return true
end

function module:GetNextRayFaceDirection()
	local direction = Vector3.new()

	if self.Velocity.X > 0 then
		direction += Vector3.new(1, 0, 0)
	elseif self.Velocity.X < 0 then
		direction -= Vector3.new(1, 0, 0)
	end

	if self.Velocity.Y > 0 then
		direction += Vector3.new(0, 1, 0)
	elseif self.Velocity.Y < 0 then
		direction -= Vector3.new(0, 1, 0)
	end

	if self.Velocity.Z > 0 then
		direction += Vector3.new(0, 0, 1)
	elseif self.Velocity.Z < 0 then
		direction -= Vector3.new(0, 0, 1)
	end

	return direction
end

function module:Decelerate(multiplier, decelerationValue)
	local deceleration = decelerationValue * multiplier

	if self.Velocity.X < 0 then 
		deceleration = Vector3.new(-deceleration.X, deceleration.Y, deceleration.Z) 
	end

	if self.Velocity.Y < 0 then 
		deceleration = Vector3.new(deceleration.X, -deceleration.Y, deceleration.Z) 
	end

	if self.Velocity.Z < 0 then 
		deceleration = Vector3.new(deceleration.X, deceleration.Y, -deceleration.Z) 
	end

	local newVelocity = self.Velocity - deceleration

	if self.Velocity.X ~= 0 then
		if self.Velocity.X > 0 then
			if newVelocity.X < 0 then
				newVelocity = Vector3.new(0, newVelocity.Y, newVelocity.Z) 
			end
		else
			if newVelocity.X > 0 then
				newVelocity = Vector3.new(0, newVelocity.Y, newVelocity.Z) 
			end
		end
	else
		newVelocity = Vector3.new(0, newVelocity.Y, newVelocity.Z) 
	end

	if self.Velocity.Y ~= 0 then
		if self.Velocity.Y > 0 then 
			if newVelocity.Y < 0 then
				Vector3.new(newVelocity.X, 0, newVelocity.Z)
			end
		else
			if newVelocity.Y > 0 then
				Vector3.new(newVelocity.X, 0, newVelocity.Z)
			end
		end
	else
		newVelocity = Vector3.new(newVelocity.X, 0, newVelocity.Z)
	end

	if self.Velocity.Z ~= 0 then
		if self.Velocity.Z > 0 then 
			if newVelocity.Z < 0 then
				newVelocity = Vector3.new(newVelocity.X, newVelocity.Y, 0)
			end
		else
			if newVelocity.Z > 0 then
				newVelocity = Vector3.new(newVelocity.X, newVelocity.Y, 0)
			end
		end
	else
		newVelocity = Vector3.new(newVelocity.X, newVelocity.Y, 0)
	end

	--prevents a funky behavior where bounce object would moves ever so slightly up and down when its velocity should be at 0 
	if newVelocity.Y > -2 and newVelocity.Y < -0.2 then
		newVelocity = Vector3.new(newVelocity.X, 0, newVelocity.Z) 
	end

	if newVelocity.Y > 0 and newVelocity.Y < 0.1 then
		newVelocity = Vector3.new(newVelocity.X, 0, newVelocity.Z) 
	end


	self.Velocity = newVelocity
end

function module:Update()
	local dt = RS.Heartbeat:Wait()

	local nextRayFaceDirection = self:GetNextRayFaceDirection()

	local collisionSize = self.CollisionSize / 2

	local nextPosition = self.Position + self.Velocity * dt

	local ray = Ray.new(self.Position, (nextPosition - self.Position + (nextRayFaceDirection * collisionSize)))
	local hit, hitpos, surfacenormal = workspace:FindPartOnRayWithIgnoreList(ray, {self.Parent, unpack(self.IgnoreList)})

	if hit and self:CanCollide(hit) and self.Velocity ~= Vector3.new() then 
		local reflect = (self.Velocity - (2 * self.Velocity:Dot(surfacenormal) * surfacenormal))

		if not self.AffectedByGravity then
			self.Velocity = reflect 
		else
			self.Velocity = reflect - Vector3.new(0, self.Gravity, 0) 
		end

		if self.LoseMomentumEachBounce then
			self:Decelerate(dt, self.MomentumDecelerationBounce)
		end
	else
		self.Position = nextPosition

		if self.AffectedByGravity and self.Velocity ~= Vector3.new() then
			self.Velocity -= Vector3.new(0, self.Gravity, 0)
		end
	end

	if self.LoseMomentumOvertime then
		self:Decelerate(dt, self.MomentumDecelerationOvertime)
	end

	self.Parent.CFrame = CFrame.new(self.Position) * CFrame.Angles(math.rad(self.Parent.Orientation.X), math.rad(self.Parent.Orientation.Y), math.rad(self.Parent.Orientation.Z)) 
end

return module
